name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Minimal permissions for security hardening
permissions:
  contents: read
  pull-requests: write # for test annotations

# Prevent concurrent runs on the same ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-newsletter:
    name: Validate Newsletter API
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies (clean)
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run Newsletter API tests
        run: npm run test:api
        env:
          NODE_ENV: test

      - name: Enforce coverage thresholds
        run: |
          npm run test:coverage || {
            echo "::error::Newsletter API coverage below required thresholds. Please add tests to meet the 90% threshold for the Newsletter API route.";
            exit 1;
          }

      - name: Upload JUnit test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newsletter-api-junit-${{ matrix.node-version }}
          path: reports/junit.xml
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newsletter-api-coverage-${{ matrix.node-version }}
          path: coverage/**
          if-no-files-found: ignore
          retention-days: 7

  build:
    name: Build Application
    needs: [validate-newsletter]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build

      - name: Build Storybook
        run: npm run build-storybook

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            storybook-static/
          retention-days: 7

  e2e:
    name: End-to-End Tests
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    name: Deployment Gate
    needs: [e2e]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: All checks passed
        run: |
          echo "âœ… All validation, build, and E2E tests passed successfully."
          echo "This job serves as a deployment gate. Actual deployment steps can be added here."
          echo "Example: Deploy to Vercel, AWS, or other platforms."

      - name: Deployment readiness check
        run: |
          echo "::notice::Pipeline ready for deployment. All quality gates passed."
